Object subclass: #Queen	instanceVariableNames: 'row column neighbor'	classVariableNames: ''	poolDictionaries: ''	category: 'EightQueens'!!Queen methodsFor: 'initialization' stamp: 'SergioAlvarado 1/31/2019 18:03'!setColumn: aNumber neighbor: aQueen		"initialize the data fields"	column := aNumber.	neighbor := aQueen.	row := 1.! !!Queen methodsFor: 'accessing' stamp: 'SergioAlvarado 1/31/2019 18:17'!advance		" first try next row"	(row<8)		ifTrue: [ row := row + 1. ^ self findSolution ].		"cannot go further, move neighbor"	(neighbor advance) ifFalse: [ ^ false ].		"begin again in row 1 "	row:=1.	^ self findSolution! !!Queen methodsFor: 'as yet unclassified' stamp: 'SergioAlvarado 1/31/2019 18:19'!findSolution	[neighbor canAttack: row column: column]		whileTrue: [ self advance ifFalse: [ ^ false]].	^ true! !!Queen methodsFor: 'testing' stamp: 'SergioAlvarado 1/31/2019 18:31'!canAttack: testRow column: testColumn | columnDifference |	columnDifference := testColumn - column.	(((row = testRow) or: 		[ row + columnDifference = testRow ]) or: 		[ row - columnDifference = testRow ])			ifTrue: [ ^ true ].	^ neighbor canAttack: testRow column: testColumn! !!Queen methodsFor: 'testing' stamp: 'SergioAlvarado 1/31/2019 19:22'!result	(neighbor className = Queen) 	ifTrue: [^ neighbor result; addLast: row]! !Object subclass: #SentinelQueen	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'EightQueens'!!SentinelQueen methodsFor: 'testing' stamp: 'SergioAlvarado 1/31/2019 17:57'!canAttack: row column: column		"sentinels cannot attack"	^ false! !!SentinelQueen methodsFor: 'accessing' stamp: 'SergioAlvarado 1/31/2019 18:52'!result		"return empty list as result"	^ OrderedCollection new! !!SentinelQueen methodsFor: 'accessing' stamp: 'SergioAlvarado 1/31/2019 17:55'!advance	"sentinels do not attack"	^ false! !